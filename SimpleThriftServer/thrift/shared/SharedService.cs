/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace shared
{
  public partial class SharedService
  {
    public interface IAsync
    {
      global::System.Threading.Tasks.Task<global::shared.SharedStruct> getStruct(int key, CancellationToken cancellationToken = default);

    }


    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<global::shared.SharedStruct> getStruct(int key, CancellationToken cancellationToken = default)
      {
        await send_getStruct(key, cancellationToken);
        return await recv_getStruct(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getStruct(int key, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getStruct", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp5 = new InternalStructs.getStruct_args() {
          Key = key,
        };
        
        await tmp5.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::shared.SharedStruct> recv_getStruct(CancellationToken cancellationToken = default)
      {
        
        var tmp6 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp6.Type == TMessageType.Exception)
        {
          var tmp7 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp7;
        }

        var tmp8 = new InternalStructs.getStruct_result();
        await tmp8.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp8.__isset.success)
        {
          return tmp8.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getStruct failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["getStruct"] = getStruct_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out var fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task getStruct_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp9 = new InternalStructs.getStruct_args();
        await tmp9.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp10 = new InternalStructs.getStruct_result();
        try
        {
          tmp10.Success = await _iAsync.getStruct(tmp9.Key, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("getStruct", TMessageType.Reply, seqid), cancellationToken); 
          await tmp10.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp11)
        {
          var tmp12 = $"Error occurred in {GetType().FullName}: {tmp11.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp11, tmp12);
          else
            Console.Error.WriteLine(tmp12);
          var tmp13 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getStruct", TMessageType.Exception, seqid), cancellationToken);
          await tmp13.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class getStruct_args : TBase
      {
        private int _key;

        public int Key
        {
          get
          {
            return _key;
          }
          set
          {
            __isset.key = true;
            this._key = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool key;
        }

        public getStruct_args()
        {
        }

        public getStruct_args DeepCopy()
        {
          var tmp14 = new getStruct_args();
          if(__isset.key)
          {
            tmp14.Key = this.Key;
          }
          tmp14.__isset.key = this.__isset.key;
          return tmp14;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    Key = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp15 = new TStruct("getStruct_args");
            await oprot.WriteStructBeginAsync(tmp15, cancellationToken);
            var tmp16 = new TField();
            if(__isset.key)
            {
              tmp16.Name = "key";
              tmp16.Type = TType.I32;
              tmp16.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp16, cancellationToken);
              await oprot.WriteI32Async(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getStruct_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.key == other.__isset.key) && ((!__isset.key) || (global::System.Object.Equals(Key, other.Key))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.key)
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp17 = new StringBuilder("getStruct_args(");
          int tmp18 = 0;
          if(__isset.key)
          {
            if(0 < tmp18++) { tmp17.Append(", "); }
            tmp17.Append("Key: ");
            Key.ToString(tmp17);
          }
          tmp17.Append(')');
          return tmp17.ToString();
        }
      }


      public partial class getStruct_result : TBase
      {
        private global::shared.SharedStruct _success;

        public global::shared.SharedStruct Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public getStruct_result()
        {
        }

        public getStruct_result DeepCopy()
        {
          var tmp19 = new getStruct_result();
          if((Success != null) && __isset.success)
          {
            tmp19.Success = (global::shared.SharedStruct)this.Success.DeepCopy();
          }
          tmp19.__isset.success = this.__isset.success;
          return tmp19;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::shared.SharedStruct();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp20 = new TStruct("getStruct_result");
            await oprot.WriteStructBeginAsync(tmp20, cancellationToken);
            var tmp21 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp21.Name = "Success";
                tmp21.Type = TType.Struct;
                tmp21.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp21, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getStruct_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp22 = new StringBuilder("getStruct_result(");
          int tmp23 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp23++) { tmp22.Append(", "); }
            tmp22.Append("Success: ");
            Success.ToString(tmp22);
          }
          tmp22.Append(')');
          return tmp22.ToString();
        }
      }

    }

  }
}
