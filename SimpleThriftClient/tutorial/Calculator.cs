/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace tutorial
{
  public partial class Calculator
  {
    /// <summary>
    /// Ahh, now onto the cool part, defining a service. Services just need a name
    /// and can optionally inherit from another service using the extends keyword.
    /// </summary>
    public interface IAsync : global::shared.SharedService.IAsync
    {
      /// <summary>
      /// A method definition looks like C code. It has a return type, arguments,
      /// and optionally a list of exceptions that it may throw. Note that argument
      /// lists and exception lists are specified using the exact same syntax as
      /// field lists in struct or exception definitions.
      /// </summary>
      global::System.Threading.Tasks.Task ping(CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<int> Add(int num1, int num2, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<int> calculate(int logid, global::tutorial.Work w, CancellationToken cancellationToken = default);

      /// <summary>
      /// This method has a oneway modifier. That means the client only makes
      /// a request and does not listen for any response at all. Oneway methods
      /// must be void.
      /// </summary>
      global::System.Threading.Tasks.Task zip(CancellationToken cancellationToken = default);

    }


    /// <summary>
    /// Ahh, now onto the cool part, defining a service. Services just need a name
    /// and can optionally inherit from another service using the extends keyword.
    /// </summary>
    public class Client : global::shared.SharedService.Client, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task ping(CancellationToken cancellationToken = default)
      {
        await send_ping(cancellationToken);
        await recv_ping(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_ping(CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("ping", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp10 = new InternalStructs.ping_args() {
        };
        
        await tmp10.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_ping(CancellationToken cancellationToken = default)
      {
        
        var tmp11 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp11.Type == TMessageType.Exception)
        {
          var tmp12 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp12;
        }

        var tmp13 = new InternalStructs.ping_result();
        await tmp13.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> Add(int num1, int num2, CancellationToken cancellationToken = default)
      {
        await send_add(num1, num2, cancellationToken);
        return await recv_add(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_add(int num1, int num2, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("add", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp14 = new InternalStructs.add_args() {
          Num1 = num1,
          Num2 = num2,
        };
        
        await tmp14.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_add(CancellationToken cancellationToken = default)
      {
        
        var tmp15 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp15.Type == TMessageType.Exception)
        {
          var tmp16 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp16;
        }

        var tmp17 = new InternalStructs.add_result();
        await tmp17.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp17.__isset.success)
        {
          return tmp17.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "add failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> calculate(int logid, global::tutorial.Work w, CancellationToken cancellationToken = default)
      {
        await send_calculate(logid, w, cancellationToken);
        return await recv_calculate(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_calculate(int logid, global::tutorial.Work w, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("calculate", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp18 = new InternalStructs.calculate_args() {
          Logid = logid,
          W = w,
        };
        
        await tmp18.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_calculate(CancellationToken cancellationToken = default)
      {
        
        var tmp19 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp19.Type == TMessageType.Exception)
        {
          var tmp20 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp20;
        }

        var tmp21 = new InternalStructs.calculate_result();
        await tmp21.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp21.__isset.success)
        {
          return tmp21.Success;
        }
        if (tmp21.__isset.ouch)
        {
          throw tmp21.Ouch;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "calculate failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task zip(CancellationToken cancellationToken = default)
      {
        await send_zip(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_zip(CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("zip", TMessageType.Oneway, SeqId), cancellationToken);
        
        var tmp22 = new InternalStructs.zip_args() {
        };
        
        await tmp22.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

    }

    public class AsyncProcessor : global::shared.SharedService.AsyncProcessor, ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default) : base(iAsync)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["ping"] = ping_ProcessAsync;
        processMap_["add"] = add_ProcessAsync;
        processMap_["calculate"] = calculate_ProcessAsync;
        processMap_["zip"] = zip_ProcessAsync;
      }


      public new async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public new async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out var fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task ping_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp23 = new InternalStructs.ping_args();
        await tmp23.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp24 = new InternalStructs.ping_result();
        try
        {
          await _iAsync.ping(cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("ping", TMessageType.Reply, seqid), cancellationToken); 
          await tmp24.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp25)
        {
          var tmp26 = $"Error occurred in {GetType().FullName}: {tmp25.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp25, tmp26);
          else
            Console.Error.WriteLine(tmp26);
          var tmp27 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("ping", TMessageType.Exception, seqid), cancellationToken);
          await tmp27.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task add_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp28 = new InternalStructs.add_args();
        await tmp28.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp29 = new InternalStructs.add_result();
        try
        {
          tmp29.Success = await _iAsync.Add(tmp28.Num1, tmp28.Num2, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("add", TMessageType.Reply, seqid), cancellationToken); 
          await tmp29.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp30)
        {
          var tmp31 = $"Error occurred in {GetType().FullName}: {tmp30.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp30, tmp31);
          else
            Console.Error.WriteLine(tmp31);
          var tmp32 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("add", TMessageType.Exception, seqid), cancellationToken);
          await tmp32.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task calculate_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp33 = new InternalStructs.calculate_args();
        await tmp33.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp34 = new InternalStructs.calculate_result();
        try
        {
          try
          {
            tmp34.Success = await _iAsync.calculate(tmp33.Logid, tmp33.W, cancellationToken);
          }
          catch (global::tutorial.InvalidOperation tmp35)
          {
            tmp34.Ouch = tmp35;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("calculate", TMessageType.Reply, seqid), cancellationToken); 
          await tmp34.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp36)
        {
          var tmp37 = $"Error occurred in {GetType().FullName}: {tmp36.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp36, tmp37);
          else
            Console.Error.WriteLine(tmp37);
          var tmp38 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("calculate", TMessageType.Exception, seqid), cancellationToken);
          await tmp38.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task zip_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp39 = new InternalStructs.zip_args();
        await tmp39.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        try
        {
          await _iAsync.zip(cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp41)
        {
          var tmp42 = $"Error occurred in {GetType().FullName}: {tmp41.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp41, tmp42);
          else
            Console.Error.WriteLine(tmp42);
        }
      }

    }

    public class InternalStructs
    {

      public partial class ping_args : TBase
      {

        public ping_args()
        {
        }

        public ping_args DeepCopy()
        {
          var tmp43 = new ping_args();
          return tmp43;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp44 = new TStruct("ping_args");
            await oprot.WriteStructBeginAsync(tmp44, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is ping_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp45 = new StringBuilder("ping_args(");
          tmp45.Append(')');
          return tmp45.ToString();
        }
      }


      public partial class ping_result : TBase
      {

        public ping_result()
        {
        }

        public ping_result DeepCopy()
        {
          var tmp47 = new ping_result();
          return tmp47;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp48 = new TStruct("ping_result");
            await oprot.WriteStructBeginAsync(tmp48, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is ping_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp49 = new StringBuilder("ping_result(");
          tmp49.Append(')');
          return tmp49.ToString();
        }
      }


      public partial class add_args : TBase
      {
        private int _num1;
        private int _num2;

        public int Num1
        {
          get
          {
            return _num1;
          }
          set
          {
            __isset.num1 = true;
            this._num1 = value;
          }
        }

        public int Num2
        {
          get
          {
            return _num2;
          }
          set
          {
            __isset.num2 = true;
            this._num2 = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool num1;
          public bool num2;
        }

        public add_args()
        {
        }

        public add_args DeepCopy()
        {
          var tmp51 = new add_args();
          if(__isset.num1)
          {
            tmp51.Num1 = this.Num1;
          }
          tmp51.__isset.num1 = this.__isset.num1;
          if(__isset.num2)
          {
            tmp51.Num2 = this.Num2;
          }
          tmp51.__isset.num2 = this.__isset.num2;
          return tmp51;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    Num1 = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Num2 = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp52 = new TStruct("add_args");
            await oprot.WriteStructBeginAsync(tmp52, cancellationToken);
            var tmp53 = new TField();
            if(__isset.num1)
            {
              tmp53.Name = "num1";
              tmp53.Type = TType.I32;
              tmp53.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp53, cancellationToken);
              await oprot.WriteI32Async(Num1, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.num2)
            {
              tmp53.Name = "num2";
              tmp53.Type = TType.I32;
              tmp53.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp53, cancellationToken);
              await oprot.WriteI32Async(Num2, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is add_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.num1 == other.__isset.num1) && ((!__isset.num1) || (global::System.Object.Equals(Num1, other.Num1))))
            && ((__isset.num2 == other.__isset.num2) && ((!__isset.num2) || (global::System.Object.Equals(Num2, other.Num2))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.num1)
            {
              hashcode = (hashcode * 397) + Num1.GetHashCode();
            }
            if(__isset.num2)
            {
              hashcode = (hashcode * 397) + Num2.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp54 = new StringBuilder("add_args(");
          int tmp55 = 0;
          if(__isset.num1)
          {
            if(0 < tmp55++) { tmp54.Append(", "); }
            tmp54.Append("Num1: ");
            Num1.ToString(tmp54);
          }
          if(__isset.num2)
          {
            if(0 < tmp55++) { tmp54.Append(", "); }
            tmp54.Append("Num2: ");
            Num2.ToString(tmp54);
          }
          tmp54.Append(')');
          return tmp54.ToString();
        }
      }


      public partial class add_result : TBase
      {
        private int _success;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public add_result()
        {
        }

        public add_result DeepCopy()
        {
          var tmp56 = new add_result();
          if(__isset.success)
          {
            tmp56.Success = this.Success;
          }
          tmp56.__isset.success = this.__isset.success;
          return tmp56;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp57 = new TStruct("add_result");
            await oprot.WriteStructBeginAsync(tmp57, cancellationToken);
            var tmp58 = new TField();

            if(this.__isset.success)
            {
              tmp58.Name = "Success";
              tmp58.Type = TType.I32;
              tmp58.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp58, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is add_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp59 = new StringBuilder("add_result(");
          int tmp60 = 0;
          if(__isset.success)
          {
            if(0 < tmp60++) { tmp59.Append(", "); }
            tmp59.Append("Success: ");
            Success.ToString(tmp59);
          }
          tmp59.Append(')');
          return tmp59.ToString();
        }
      }


      public partial class calculate_args : TBase
      {
        private int _logid;
        private global::tutorial.Work _w;

        public int Logid
        {
          get
          {
            return _logid;
          }
          set
          {
            __isset.logid = true;
            this._logid = value;
          }
        }

        public global::tutorial.Work W
        {
          get
          {
            return _w;
          }
          set
          {
            __isset.w = true;
            this._w = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool logid;
          public bool w;
        }

        public calculate_args()
        {
        }

        public calculate_args DeepCopy()
        {
          var tmp61 = new calculate_args();
          if(__isset.logid)
          {
            tmp61.Logid = this.Logid;
          }
          tmp61.__isset.logid = this.__isset.logid;
          if((W != null) && __isset.w)
          {
            tmp61.W = (global::tutorial.Work)this.W.DeepCopy();
          }
          tmp61.__isset.w = this.__isset.w;
          return tmp61;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    Logid = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    W = new global::tutorial.Work();
                    await W.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp62 = new TStruct("calculate_args");
            await oprot.WriteStructBeginAsync(tmp62, cancellationToken);
            var tmp63 = new TField();
            if(__isset.logid)
            {
              tmp63.Name = "logid";
              tmp63.Type = TType.I32;
              tmp63.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp63, cancellationToken);
              await oprot.WriteI32Async(Logid, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((W != null) && __isset.w)
            {
              tmp63.Name = "w";
              tmp63.Type = TType.Struct;
              tmp63.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp63, cancellationToken);
              await W.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is calculate_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.logid == other.__isset.logid) && ((!__isset.logid) || (global::System.Object.Equals(Logid, other.Logid))))
            && ((__isset.w == other.__isset.w) && ((!__isset.w) || (global::System.Object.Equals(W, other.W))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.logid)
            {
              hashcode = (hashcode * 397) + Logid.GetHashCode();
            }
            if((W != null) && __isset.w)
            {
              hashcode = (hashcode * 397) + W.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp64 = new StringBuilder("calculate_args(");
          int tmp65 = 0;
          if(__isset.logid)
          {
            if(0 < tmp65++) { tmp64.Append(", "); }
            tmp64.Append("Logid: ");
            Logid.ToString(tmp64);
          }
          if((W != null) && __isset.w)
          {
            if(0 < tmp65++) { tmp64.Append(", "); }
            tmp64.Append("W: ");
            W.ToString(tmp64);
          }
          tmp64.Append(')');
          return tmp64.ToString();
        }
      }


      public partial class calculate_result : TBase
      {
        private int _success;
        private global::tutorial.InvalidOperation _ouch;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }

        public global::tutorial.InvalidOperation Ouch
        {
          get
          {
            return _ouch;
          }
          set
          {
            __isset.ouch = true;
            this._ouch = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
          public bool ouch;
        }

        public calculate_result()
        {
        }

        public calculate_result DeepCopy()
        {
          var tmp66 = new calculate_result();
          if(__isset.success)
          {
            tmp66.Success = this.Success;
          }
          tmp66.__isset.success = this.__isset.success;
          if((Ouch != null) && __isset.ouch)
          {
            tmp66.Ouch = (global::tutorial.InvalidOperation)this.Ouch.DeepCopy();
          }
          tmp66.__isset.ouch = this.__isset.ouch;
          return tmp66;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Ouch = new global::tutorial.InvalidOperation();
                    await Ouch.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp67 = new TStruct("calculate_result");
            await oprot.WriteStructBeginAsync(tmp67, cancellationToken);
            var tmp68 = new TField();

            if(this.__isset.success)
            {
              tmp68.Name = "Success";
              tmp68.Type = TType.I32;
              tmp68.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp68, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.ouch)
            {
              if (Ouch != null)
              {
                tmp68.Name = "Ouch";
                tmp68.Type = TType.Struct;
                tmp68.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp68, cancellationToken);
                await Ouch.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is calculate_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.ouch == other.__isset.ouch) && ((!__isset.ouch) || (global::System.Object.Equals(Ouch, other.Ouch))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((Ouch != null) && __isset.ouch)
            {
              hashcode = (hashcode * 397) + Ouch.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp69 = new StringBuilder("calculate_result(");
          int tmp70 = 0;
          if(__isset.success)
          {
            if(0 < tmp70++) { tmp69.Append(", "); }
            tmp69.Append("Success: ");
            Success.ToString(tmp69);
          }
          if((Ouch != null) && __isset.ouch)
          {
            if(0 < tmp70++) { tmp69.Append(", "); }
            tmp69.Append("Ouch: ");
            Ouch.ToString(tmp69);
          }
          tmp69.Append(')');
          return tmp69.ToString();
        }
      }


      public partial class zip_args : TBase
      {

        public zip_args()
        {
        }

        public zip_args DeepCopy()
        {
          var tmp71 = new zip_args();
          return tmp71;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp72 = new TStruct("zip_args");
            await oprot.WriteStructBeginAsync(tmp72, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is zip_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp73 = new StringBuilder("zip_args(");
          tmp73.Append(')');
          return tmp73.ToString();
        }
      }

    }

  }
}
